services:
  keycloak:
    image: keycloak/keycloak:latest
    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm.json
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.migration.strategy=OVERWRITE_EXISTING"
      KEYCLOAK_PROFILE_FEATURE_UPLOAD_SCRIPTS: enabled
    volumes:
      - ./realm.json:/opt/keycloak/data/import/realm.json
    command:
      - "start-dev"
      - "--http-port=8080"
      - "--import-realm"
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "keycloak"

  redis-server:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  elasticsearch:
    image: elasticsearch:8.16.6
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kibana:
    image: kibana:8.16.6
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"

  logstash:
    image: logstash:8.16.6
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - .:/etc/logstash/conf.d
    ports:
      - "9000:9000"
    networks:
      backend:
        aliases:
          - "logstash"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

  configuration-server:
    image: docker.io/library/configuration-server:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "${CONFIG_PORT:-8071}:${CONFIG_PORT:-8071}"
    environment:
      SERVER_PORT: ${CONFIG_PORT:-8071}
    networks:
      backend:
        aliases:
          - "configserver"

  service-discovery:
    image: docker.io/library/service-discovery:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "8070:8070"
    depends_on:
      inventory-service-db:
        condition: service_healthy
      configuration-server:
        condition: service_started
    networks:
      backend:
        aliases:
          - "servicediscovery"

  gateway-server:
    image: docker.io/library/gateway-server:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "${GATEWAY_PORT:-8072}:${GATEWAY_PORT:-8072}"
    environment:
      PROFILE: "default"
      SERVER_PORT: "${GATEWAY_PORT:-8072}"
      CONFIGSERVER_URI: "http://configserver:${CONFIG_PORT:-8071}"
      EUREKASERVER_URI: "http://servicediscovery:${EUREKA_PORT:-8070}/eureka/"
      EUREKASERVER_PORT: "${EUREKA_PORT:-8070}"
      CONFIGSERVER_PORT: "${CONFIG_PORT:-8071}"
    depends_on:
      inventory-service-db:
        condition: service_healthy
      point-of-sale-service-db:
        condition: service_healthy
      loyalty-program-service-db:
        condition: service_healthy
      configuration-server:
        condition: service_started
      service-discovery:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "gateway"

  inventory-service-db:
    image: postgres:latest
    restart: always
    ports:
      - "${INVENTORY_DB_PORT:-5431}:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory_service
      GATEWAY_PORT: "${GATEWAY_PORT:-8072}"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/inventory-service/data/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - "inventorydb"

  loyalty-program-service-db:
    image: postgres:latest
    restart: always
    ports:
      - "${LOYALTY_DB_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: loyalty_program_service
      GATEWAY_PORT: "${GATEWAY_PORT:-8072}"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/loyalty-program-service/data/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - "loyaltydb"

  point-of-sale-service-db:
    image: postgres:latest
    restart: always
    ports:
      - "${POS_DB_PORT:-5433}:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: point_of_sale_service
      GATEWAY_PORT: "${GATEWAY_PORT:-8072}"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/point-of-sale-service/data/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - "posdb"

  inventory-service:
    image: docker.io/library/inventory-service:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "${INVENTORY_SERVICE_PORT:-8083}:8080"
    environment:
      SPRING_CONFIG_IMPORT: "configserver:${CONFIG_SERVER_URI:-http://configserver:8071}"
      SPRING_PROFILES_ACTIVE: "${INVENTORY_SERVICE_PROFILE:-dev}"
      DATABASESERVER_PORT: "${INVENTORY_DB_PORT:-5431}"
    depends_on:
      inventory-service-db:
        condition: service_healthy
      configuration-server:
        condition: service_started
      service-discovery:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - backend

  loyalty-program-service:
    image: docker.io/library/loyalty-service:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "${LOYALTY_SERVICE_PORT:-8081}:8080"
    environment:
      SPRING_CONFIG_IMPORT: "configserver:${CONFIG_SERVER_URI:-http://configserver:8071}"
      SPRING_PROFILES_ACTIVE: "${LOYALTY_SERVICE_PROFILE:-dev}"
      DATABASESERVER_PORT: "${LOYALTY_DB_PORT:-5432}"
    depends_on:
      loyalty-program-service-db:
        condition: service_healthy
      configuration-server:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - backend

  point-of-sale-service:
    image: docker.io/library/point-of-sale-service:0.0.1-SNAPSHOT
    restart: on-failure
    ports:
      - "${POS_SERVICE_PORT:-8082}:8080"
    environment:
      SPRING_CONFIG_IMPORT: "configserver:${CONFIG_SERVER_URI:-http://configserver:8071}"
      SPRING_PROFILES_ACTIVE: "${POS_SERVICE_PROFILE:-dev}"
      DATABASESERVER_PORT: "${POS_DB_PORT:-5433}"
    depends_on:
      point-of-sale-service-db:
        condition: service_healthy
      configuration-server:
        condition: service_started
      service-discovery:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge
volumes:
  esdata1:
    driver: local
